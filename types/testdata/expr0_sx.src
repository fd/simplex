// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// simplex expressions

package expr0_sx

func _Select() {
  var v view[string]float64
  var w view[string]float64
  var x view[string]int
  var z int

  f0 := func(f float64)bool{ return true }
  f1 := func(){}
  f2 := func(f string)bool{ return true }
  f3 := func(f float64)int{ return 5 }

  _0 := z /* ERROR "not a view receiver" */ .select(f0)
  _1 := v.select(f1 /* ERROR "not a select func" */)
  _2 := v.select(f2 /* ERROR "not a select func" */)
  _3 := v.select(f3 /* ERROR "not a select func" */)
  w = v.select(f0)
  x = w /* ERROR "cannot assign" */
}

func _Reject() {
  var v view[string]float64
  var w view[string]float64
  var x view[string]int
  var z int

  f0 := func(f float64)bool{ return true }
  f1 := func(){}
  f2 := func(f string)bool{ return true }
  f3 := func(f float64)int{ return 5 }

  _0 := z /* ERROR "not a view receiver" */ .reject(f0)
  _1 := v.reject(f1 /* ERROR "not a reject func" */)
  _2 := v.reject(f2 /* ERROR "not a reject func" */)
  _3 := v.reject(f3 /* ERROR "not a reject func" */)
  w = v.reject(f0)
  x = w /* ERROR "cannot assign" */
}

func _Detect() {
  var v view[string]float64
  var w float64
  var x int
  var z int

  f0 := func(f float64)bool{ return true }
  f1 := func(){}
  f2 := func(f string)bool{ return true }
  f3 := func(f float64)int{ return 5 }

  _0 := z /* ERROR "not a view receiver" */ .detect(f0)
  _1 := v.detect(f1 /* ERROR "not a detect func" */)
  _2 := v.detect(f2 /* ERROR "not a detect func" */)
  _3 := v.detect(f3 /* ERROR "not a detect func" */)
  w = v.detect(f0)
  x = w /* ERROR "cannot assign" */
}

func _Collect() {
  var v view[string]float64
  var w view[string]int
  var x view[string]string
  var z int

  f0 := func(f float64)int{ return int(f) * 5 }
  f1 := func(){}
  f2 := func(f string)bool{ return true }

  _0 := z /* ERROR "not a view receiver" */ .collect(f0)
  _1 := v.collect(f1 /* ERROR "not a collect func" */)
  _2 := v.collect(f2 /* ERROR "not a collect func" */)
  w = v.collect(f0)
  x = w /* ERROR "cannot assign" */
}

func _Inject() {
  var v view[string]view[]int
  var w view[string]float64
  var x view[string]string
  var z int

  f0 := func(a []float64, f int)float64{
    var r float64
    r += float64(f)
    for _, e := range a {
      r += e
    }
    return r
  }
  f1 := func(){}
  f2 := func(f string)bool{ return true }

  _0 := z /* ERROR "not a view receiver" */ .inject(f0)
  _1 := v.inject(f1 /* ERROR "not a inject func" */)
  _2 := v.inject(f2 /* ERROR "not a inject func" */)
  w = v.inject(f0)
  x = w /* ERROR "cannot assign" */
}

func _Group() {
  var v view[string]float64
  var w view[int]view[string]float64
  var x view[string]string
  var z int

  f0 := func(f float64)int{ return int(f) * 5 }
  f1 := func(){}
  f2 := func(f string)bool{ return true }

  _0 := z /* ERROR "not a view receiver" */ .group(f0)
  _1 := v.group(f1 /* ERROR "not a group func" */)
  _2 := v.group(f2 /* ERROR "not a group func" */)
  w = v.group(f0)
  x = w /* ERROR "cannot assign" */
}

func _Index() {
  var v view[string]float64
  var w view[int]float64
  var x view[string]string
  var z int

  f0 := func(f float64)int{ return int(f) * 5 }
  f1 := func(){}
  f2 := func(f string)bool{ return true }

  _0 := z /* ERROR "not a view receiver" */ .index(f0)
  _1 := v.index(f1 /* ERROR "not a index func" */)
  _2 := v.index(f2 /* ERROR "not a index func" */)
  w = v.index(f0)
  x = w /* ERROR "cannot assign" */
}

func _Sort() {
  var v view[string]float64
  var w view[]float64
  var x view[string]string
  var z int

  f0 := func(f float64)int{ return int(f) * 5 }
  f1 := func(){}
  f2 := func(f string)bool{ return true }

  _0 := z /* ERROR "not a view receiver" */ .sort(f0)
  _1 := v.sort(f1 /* ERROR "not a sort func" */)
  _2 := v.sort(f2 /* ERROR "not a sort func" */)
  w = v.sort(f0)
  x = w /* ERROR "cannot assign" */
}
